
blank identifier = _ 
Capitalized exported names ~ of variables and functions 
CSP = communicating sequential processes 
channel ~ communication mechanism that allows one goroutine to pass values of a specified type to another goroutine 
composite literal ~ a compact notation for instantiating any of Go’s composite types from a sequence of element values: []color.Color{...} or gif.GIF{...}
contributed packages ~ godoc.org/ 
core type ~ an abstract construct that was introduced for expediency and to simplify dealing with generic operands
factored import statement ~ ( "..." ) 
gc ~ Google compiler toolchain 
gccgo ~ 
general comments ~ start with the character sequence /* and stop with the first subsequent character sequence */
generic operands ~ operands whose types are type parameters
Go ~ programming language 
Golang = Go language 
gollvm ~ Go LLVM
GopherJS ~ cross-compiler from Go to JavaScript 
gopl ~ "The Go Programming Language" book by A.A.A.Donovan & B.W.Kernighan (gopl.io) 
goroutine ~ concurrently executable function 
Ken Thompson ~ 
keywords ~ Go has 25 keywords 
line comments ~ start with the character sequence // and stop at the end of the line
naked return ~ return without an expression: named return value is returned
name ~ begins with anything that Unicode deems a letter or _ and may have any number of letters, digits, and underscores: case matters 
omitted inferred types ~ of variables with initializers
package main ~ 
package-level declaration ~ 
predeclared names ~ like int and true for built-in constants, types and functions 
receive-only channel ~
Rob Pike ~ 
Robert Griesemer ~ 
standard packages ~ golang.org/pkg 
statement ~ every statement begins with a keyword 
struct ~ a group of values called fields, often of different types, that are collected together in a single object that can be treated as a unit
struct literal ~ 
tagless switch ~ 
tokens ~ 4 classes: identifiers, keywords, operators and punctuation, literals
tuple assignment ~ i, j = j, i 
TinyGo.org ~
type constraint ~ an interface that defines the set of permissible type arguments for the respective type parameter and controls the operations supported by values of that type parameter
underlying type ~ If T is 1 of the predeclared boolean, numeric, or string types, or a type literal, the corresponding underlying type is T itself
zero value ~ of an uninitialized variable is implicit initial value: 0 for numbers, false for booleans, "" for strings, nil for interfaces and reference types 
