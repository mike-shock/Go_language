;  // a semicolon may be omitted before a closing ")" or "}"
_  // blank identifier ~ the variable to throw away value 
_ // When a package is imported prefixed with a blank identifier, the init function of the package is called. The function registers the driver. 
<- // operation of sending to a channel (ch<-) or reading from (<-ch) a channel 
:= // type inference: short assignment and declaration of a variable 
%T // for printing the type 
%v // for printing the value 
*p // referring by pointer to a value 
*T // a pointer to the type T 
&v // getting a pointer to a value 
v := <- ch // receive a value from the channel
v, closed := <- ch // receive a value from the channel and check if it's closed 
ch <- v // send a value to the channel 
[]T // slice
[size]T // array
T(v) // expression for converting a value to the type 

break    // reserved keyword: if, for, switch 
case     // reserved keyword: switch 
chan ch  // reserved keyword: channel declaration 
ch<-     // input channel type 
const C = expression       // reserved keyword: constant declaration 
const C1, C2 = v1, v2      // constant declaration 
const ( C1 = v1, C2 = v2 ) // constant declaration 
const Big float64 = 1 << 100 // binary 1 with 100 zeros 
continue // reserved keyword: to the next loop iteration 
default // reserved keyword: 
defer // reserved keyword: command execution 
else // reserved keyword: otherwise for if 
fallthrough // reserved keyword: to the next case in switch 
for // reserved keyword: cycle 
func f() { ... } // reserved keyword: function declaration
func main() { ... } // programme starting function 
go goroutime_name // reserved keyword: start concurrent routine 
goto label // reserved keyword: 
if // reserved keyword: branch 
import "..." // reserved keyword: import a package
import ( "..." ) // factored import statement 
init () // functions to be automatically executed when package is imported 
interface i {} // reserved keyword: 
make(T) // allocate memory for a value of type T 
map[KeyType]ValueType // reserved keyword: map declaration 
package main // reserved keyword: package declaration 
range // reserved keyword: 
return // reserved keyword: 
select // reserved keyword: 
struct S { ... } //reserved keyword:  structure declaration 
struct { ... } // struct literal 
switch // reserved keyword: 
type Type // reserved keyword: type declaration 
var name Type = expression // reserved keyword:  variables declaration 

ioutil.Discard // package: writing to this output stream discards the data 
os.Stdout // package: standard output stream 
